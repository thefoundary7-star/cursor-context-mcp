// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String?
  name          String?
  firstName     String?
  lastName      String?
  company       String?
  role          String   @default("USER") // Changed from enum to string
  isActive      Boolean  @default(true)
  emailVerified DateTime?
  trialEndsAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  subscriptions    Subscription[]
  licenses         License[]
  analytics        Analytics[]
  apiKeys          ApiKey[]
  usage            Usage[]
  payments         Payment[]
  checkoutSessions CheckoutSession[]

  @@map("users")
}

model Subscription {
  id                    String            @id @default(cuid())
  userId                String
  dodoSubscriptionId    String            @unique
  dodoCustomerId        String
  dodoProductId         String
  tier                  String            // Changed from enum to string
  status                String            // Changed from enum to string
  licenseKey            String?           @unique
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  trialEnd              DateTime?
  canceledAt            DateTime?
  cancellationReason    String?
  lastPaymentAt         DateTime?
  metadata              String?           // Changed from Json to String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("subscriptions")
}

model Payment {
  id               String        @id @default(cuid())
  dodoPaymentId    String        @unique
  subscriptionId   String?
  userId           String?
  amount           Int           // Amount in cents
  currency         String        @default("USD")
  status           String        // Changed from enum to string
  failureReason    String?
  paidAt           DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  subscription Subscription? @relation(fields: [subscriptionId], references: [dodoSubscriptionId], onDelete: SetNull)

  @@map("payments")
}

model CheckoutSession {
  id            String    @id @default(cuid())
  dodoSessionId String    @unique
  userId        String
  customerEmail String
  plan          String
  amount        Int
  currency      String    @default("USD")
  paymentStatus String    @default("pending")
  subscriptionId String?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("checkout_sessions")
}

model License {
  id          String      @id @default(cuid())
  userId      String
  licenseKey  String      @unique
  name        String?
  description String?
  tier        String      // Changed from enum to string
  maxServers  Int         @default(1)
  isActive    Boolean     @default(true)
  expiresAt   DateTime?
  subscriptionId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  servers     Server[]
  analytics   Analytics[]
  usage       Usage[]
  dailyUsage  DailyUsage[]

  @@map("licenses")
}

model Server {
  id          String   @id @default(cuid())
  licenseId   String
  serverId    String   @unique // Unique identifier from MCP server
  name        String?
  version     String?
  lastSeen    DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  license     License      @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  analytics   Analytics[]
  usage       Usage[]

  @@map("servers")
}

model Analytics {
  id          String      @id @default(cuid())
  userId      String
  licenseId   String?
  serverId    String?
  eventType   String      // Changed from enum to string
  eventData   String?     // Changed from Json to String
  metadata    String?     // Changed from Json to String
  timestamp   DateTime    @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  license     License?    @relation(fields: [licenseId], references: [id], onDelete: SetNull)
  server      Server?     @relation(fields: [serverId], references: [id], onDelete: SetNull)

  @@map("analytics")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  keyHash     String   @unique
  permissions String?  // Changed from Json to String
  lastUsed    DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Usage {
  id            String   @id @default(cuid())
  userId        String
  licenseId     String?
  serverId      String?
  operationType String   // e.g., "api_call", "request", "feature_usage"
  count         Int      @default(1)
  timestamp     DateTime @default(now())
  metadata      String?  // Changed from Json to String
  billingPeriod DateTime // Start of billing period (monthly)

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  license License? @relation(fields: [licenseId], references: [id], onDelete: SetNull)
  server  Server?  @relation(fields: [serverId], references: [id], onDelete: SetNull)

  @@index([licenseId, timestamp]) // For efficient daily usage queries
  @@map("usage")
}

model DailyUsage {
  id        String   @id @default(cuid())
  licenseId String
  date      DateTime // Date component only (YYYY-MM-DD)
  callCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  license   License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, date])
  @@map("daily_usage")
}

model WebhookEvent {
  id           String    @id @default(cuid())
  dodoEventId  String    @unique
  eventType    String
  processed    Boolean   @default(false)
  attempts     Int       @default(0)
  data         String    // Changed from Json to String
  error        String?
  processedAt  DateTime?
  createdAt    DateTime  @default(now())

  @@map("webhook_events")
}

model SyncLog {
  id        String   @id @default(cuid())
  type      String   // webhook, poll, manual
  status    String   // success, error
  details   String?
  createdAt DateTime @default(now())

  @@map("sync_logs")
}
